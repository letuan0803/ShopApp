apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-deployment
  labels:
    app: spring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring
  template:
    metadata:
      labels:
        app: spring
    spec:
      containers:
      - name: spring
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "500Mi"
            cpu: "500m"
        env:
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:mysql://mysql8-service:3306/ShopApp?serverTimezone=UTC&allowPublicKeyRetrieval=true"
        - name: MYSQL_ROOT_PASSWORD
          value: "Abc123456789@"
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        image: anhtuan98a2/shopapp-spring:1.0.0.0
        ports:
        - containerPort: 8088
        livenessProbe:
          httpGet:
            path: /api/v1/actuator/health
            port: 8088
          failureThreshold: 3
          periodSeconds: 30
          initialDelaySeconds : 20
          timeoutSeconds : 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: angular-deployment
  labels:
    app: angular
spec:
  replicas: 1
  selector:
    matchLabels:
      app: angular
  template:
    metadata:
      labels:
        app: angular
    spec:
      containers:
      - name: angular
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "500Mi"
            cpu: "500m"
        image: anhtuan98a2/shopapp-angular:1.0.0.2
        ports:
        - containerPort: 80
        livenessProbe:
          httpGet:
            path: /
            port: 80
          failureThreshold: 3
          periodSeconds: 30
          timeoutSeconds : 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "500Mi"
            cpu: "500m"
        image: docker.io/redis:7.2.3
        ports:
        - containerPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql8-deployment
  labels:
    app: mysql8
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql8
  template:
    metadata:
      labels:
        app: mysql8
    spec:
      containers:
      - name: mysql8
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "500Mi"
            cpu: "500m"
        image: mysql:8.2.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_DATABASE
          value: "ShopApp"
        - name: MYSQL_ROOT_PASSWORD
          value: "Abc123456789@"
---
apiVersion: v1
kind: Service
metadata:
  name: spring-service
spec:
  type: NodePort
  selector:
    app: spring
  ports:
    - port: 8088
      # By default and for convenience, the `targetPort` is set to
      # the same value as the `port` field.
      targetPort: 8088
      # Optional field
      # By default and for convenience, the Kubernetes control plane
      # will allocate a port from a range (default: 30000-32767)
      nodePort: 30000
---
apiVersion: v1
kind: Service
metadata:
  name: angular-service
spec:
  type: NodePort
  selector:
    app: angular
  ports:
    - port: 80
      # By default and for convenience, the `targetPort` is set to
      # the same value as the `port` field.
      targetPort: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane
      # will allocate a port from a range (default: 30000-32767)
      nodePort: 30001
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      # By default and for convenience, the `targetPort` is set to
      # the same value as the `port` field.
      targetPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: mysql8-service
spec:
  type: NodePort
  selector:
    app: mysql8
  ports:
    - port: 3306
      # By default and for convenience, the `targetPort` is set to
      # the same value as the `port` field.
      targetPort: 3306
      nodePort: 30002